--- a/src/debug/ee/debugger.h	2016-10-08 21:37:38.000000000 +0200
+++ b/src/debug/ee/debugger.h	2016-11-07 22:22:06.057650158 +0100
@@ -3512,9 +3512,11 @@
  * ------------------------------------------------------------------------ */
 
 class InteropSafe {};
+static InteropSafe *dummyInteropSafe = new InteropSafe();
-#define interopsafe (*(InteropSafe*)NULL)
+#define interopsafe (*dummyInteropSafe)
 
 class InteropSafeExecutable {};
+static InteropSafeExecutable *dummyInteropSafeExecutable = new InteropSafeExecutable();
-#define interopsafeEXEC (*(InteropSafeExecutable*)NULL)
+#define interopsafeEXEC (*dummyInteropSafeExecutable)
 
 #ifndef DACCESS_COMPILE
 inline void * __cdecl operator new(size_t n, const InteropSafe&)--- a/src/debug/ildbsymlib/symwrite.h	2016-10-08 21:37:38.000000000 +0200
+++ b/src/debug/ildbsymlib/symwrite.h	2016-11-07 23:33:38.668955991 +0100
@@ -839,7 +839,8 @@
         {
             // Help mitigate the impact of buffer overflow
             // Fail fast with a null-reference AV
-            return *(static_cast<T*>(0)) ;
+            // return *(static_cast<T*>(0)) ;
+            exit(1);
         }
         return m_array[ i ];
     }
--- a/src/debug/inc/dacdbiinterface.h	2016-10-08 21:37:38.000000000 +0200
+++ v/src/debug/inc/dacdbiinterface.h	2016-11-07 23:40:52.565127985 +0100
@@ -32,7 +32,8 @@
 template<class T> void DeleteDbiMemory(T *p);
 // Need a class to serve as a tag that we can use to overload New/Delete.
 class forDbiWorker {};
-#define forDbi (*(forDbiWorker *)NULL)
+static forDbiWorker *forDbiWorkerDummy = new forDbiWorker();
+#define forDbi (*forDbiWorkerDummy)
 extern void * operator new(size_t lenBytes, const forDbiWorker &);
 extern void * operator new[](size_t lenBytes, const forDbiWorker &);
 extern void operator delete(void *p, const forDbiWorker &);

--- a/src/debug/di/rspriv.h	2016-10-08 21:37:38.000000000 +0200
+++ b/src/debug/di/rspriv.h	2016-11-07 23:47:24.761646512 +0100
@@ -176,8 +176,6 @@
     USHORT m_usPort;
 };
 
-#define forDbi (*(forDbiWorker *)NULL)
-
 // for dbi we just default to new, but we need to have these defined for both dac and dbi
 inline void * operator new(size_t lenBytes, const forDbiWorker &)
 {

--- a/src/debug/daccess/dacdbiimpl.cpp	2016-10-08 21:37:38.000000000 +0200
+++ b/src/debug/daccess/dacdbiimpl.cpp	2016-11-07 23:54:42.817731531 +0100
@@ -90,7 +90,6 @@
 //
 
 // Need a class to serve as a tag that we can use to overload New/Delete.
-#define forDbi (*(forDbiWorker *)NULL)
 
 void * operator new(size_t lenBytes, const forDbiWorker &)
 {

From bac4c2a1015cc55e7edd56e9ff8edde9690174b8 Mon Sep 17 00:00:00 2001
From: Jan Vorlicek <janvorli@microsoft.com>
Date: Fri, 28 Oct 2016 01:45:06 +0200
Subject: [PATCH] Add missing std::move to one exception throw

We had the std::move missing in one of the exception throws. For some reason,
the current clang didn't complain about it even though the copy constructor was
deleted.
---
 src/vm/exceptionhandling.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/vm/exceptionhandling.cpp b/src/vm/exceptionhandling.cpp
index e59f10e..ed155eb 100644
--- a/src/vm/exceptionhandling.cpp
+++ b/src/vm/exceptionhandling.cpp
@@ -4730,7 +4730,7 @@ VOID DECLSPEC_NORETURN DispatchManagedException(PAL_SEHException& ex, bool isHar
         }
     }
 
-    throw ex;
+    throw std::move(ex);
 }
 
 #ifdef _AMD64_
From e2590a57e8fd557aec5b8a64bcca9308a950414b Mon Sep 17 00:00:00 2001
From: Aaron Brodersen <aaron@abrodersen.com>
Date: Wed, 13 Jul 2016 12:12:50 -0500
Subject: [PATCH] Ignore unused return values

Credit to Hazerd and leafi for identifying the issue and resolution.
---
 src/pal/src/exception/seh.cpp                 | 2 +-
 tests/src/Common/Platform/platformdefines.cpp | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pal/src/exception/seh.cpp b/src/pal/src/exception/seh.cpp
index 01de6e8..a89f800 100644
--- a/src/pal/src/exception/seh.cpp
+++ b/src/pal/src/exception/seh.cpp
@@ -233,7 +233,7 @@ SEHProcessException(PEXCEPTION_POINTERS pointers)
                     {
                         // The exception happened in the page right below the stack limit,
                         // so it is a stack overflow
-                        write(STDERR_FILENO, StackOverflowMessage, sizeof(StackOverflowMessage) - 1);
+                        (void)write(STDERR_FILENO, StackOverflowMessage, sizeof(StackOverflowMessage) - 1);
                         PROCAbort();
                     }
                 }
diff --git a/tests/src/Common/Platform/platformdefines.cpp b/tests/src/Common/Platform/platformdefines.cpp
index 4caead5..3a2cae2 100644
--- a/tests/src/Common/Platform/platformdefines.cpp
+++ b/tests/src/Common/Platform/platformdefines.cpp
@@ -277,7 +277,7 @@ DWORD TP_GetFullPathName(LPWSTR fileName, DWORD nBufferLength, LPWSTR lpBuffer)
 	return GetFullPathNameW(fileName, nBufferLength, lpBuffer, NULL);
 #else
 	char nativeFullPath[MAX_PATH];
-	realpath(HackyConvertToSTR(fileName), nativeFullPath);
+	(void)realpath(HackyConvertToSTR(fileName), nativeFullPath);
 	LPWSTR fullPathForCLR = HackyConvertToWSTR(nativeFullPath);
 	wcscpy_s(lpBuffer, MAX_PATH, fullPathForCLR);
 	return wcslen(lpBuffer);
-- 
2.9.0

